name: DeepSeek Issues and PR Assistant

on:
  # Trigger on issue comments
  issue_comment:
    types: [created]
  
  # Trigger on PR comments
  pull_request_review_comment:
    types: [created]
  
  # Trigger when issues are opened
  issues:
    types: [opened, labeled]
  
  # Trigger when PRs are opened or updated
  pull_request:
    types: [opened, synchronize, ready_for_review]

jobs:
  handle-issue-comment:
    if: |
      github.event_name == 'issue_comment' && 
      contains(github.event.comment.body, '@deepseek')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Add Reaction
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            })
      
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: pip install openai pydantic python-dotenv rich prompt_toolkit
      
      - name: Process Issue Command
        id: process
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          python << 'EOF'
          import os
          import re
          import json
          from openai import OpenAI
          
          # Setup DeepSeek client
          client = OpenAI(
              api_key=os.getenv("DEEPSEEK_API_KEY"),
              base_url="https://api.deepseek.com"
          )
          
          # Extract command from comment
          comment = os.getenv("COMMENT_BODY", "")
          command_match = re.search(r'@deepseek\s+(.+)', comment, re.IGNORECASE | re.DOTALL)
          
          if not command_match:
              print("No command found")
              exit(1)
          
          command = command_match.group(1).strip()
          
          # Get issue context
          issue_title = os.getenv("ISSUE_TITLE", "")
          issue_body = os.getenv("ISSUE_BODY", "")
          issue_number = os.getenv("ISSUE_NUMBER", "")
          
          # Determine task type
          task_prompts = {
              "implement": f"""As an expert developer, implement the following feature request:
              
              Issue #{issue_number}: {issue_title}
              
              Description:
              {issue_body}
              
              Additional instructions:
              {command}
              
              Provide:
              1. Implementation approach
              2. Code structure
              3. Key code snippets
              4. Testing strategy""",
              
              "plan": f"""Create a detailed implementation plan for:
              
              Issue #{issue_number}: {issue_title}
              
              Description:
              {issue_body}
              
              Requirements:
              {command}
              
              Include:
              1. Technical approach
              2. File structure
              3. Dependencies
              4. Timeline estimate
              5. Potential challenges""",
              
              "review": f"""Review and provide feedback on:
              
              Issue #{issue_number}: {issue_title}
              
              Context:
              {issue_body}
              
              Focus on:
              {command}""",
              
              "default": f"""Help with Issue #{issue_number}: {issue_title}
              
              Context:
              {issue_body}
              
              Request:
              {command}"""
          }
          
          # Determine which prompt to use
          prompt_key = "default"
          for key in ["implement", "plan", "review"]:
              if command.lower().startswith(key):
                  prompt_key = key
                  break
          
          prompt = task_prompts[prompt_key]
          
          # Get DeepSeek's response
          print(f"🤖 Processing {prompt_key} request...")
          
          response = client.chat.completions.create(
              model="deepseek-reasoner",
              messages=[
                  {"role": "system", "content": "You are an expert software engineer helping with GitHub issues."},
                  {"role": "user", "content": prompt}
              ],
              max_tokens=4000
          )
          
          # Save response
          response_text = response.choices[0].message.content
          
          with open('deepseek_response.md', 'w') as f:
              f.write(f"## 🤖 DeepSeek Response\n\n")
              f.write(f"**Issue**: #{issue_number} - {issue_title}\n")
              f.write(f"**Command**: `{command}`\n\n")
              f.write("---\n\n")
              f.write(response_text)
          
          # Also save for GitHub output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"has_code={str('```' in response_text).lower()}\n")
              f.write(f"task_type={prompt_key}\n")
          
          print("✅ Response generated")
          EOF
      
      - name: Post Response Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const response = fs.readFileSync('deepseek_response.md', 'utf8');
            
            // Post the response
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: response
            });
            
            // Update reaction to indicate completion
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

  handle-pr-review:
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@deepseek'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: pip install openai pydantic python-dotenv
      
      - name: Get Changed Files
        id: changed_files
        run: |
          # Get list of changed files
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          
          # Get file contents with changes
          echo "## Changed Files Summary" > pr_changes.md
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "### $file" >> pr_changes.md
              echo '```diff' >> pr_changes.md
              git diff origin/${{ github.base_ref }}...HEAD -- "$file" | head -100 >> pr_changes.md
              echo '```' >> pr_changes.md
            fi
          done < changed_files.txt
      
      - name: Review Pull Request
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python << 'EOF'
          import os
          from openai import OpenAI
          
          client = OpenAI(
              api_key=os.getenv("DEEPSEEK_API_KEY"),
              base_url="https://api.deepseek.com"
          )
          
          # Read PR changes
          with open('pr_changes.md', 'r') as f:
              pr_changes = f.read()
          
          # Read changed files list
          with open('changed_files.txt', 'r') as f:
              changed_files = f.read().strip().split('\n')
          
          pr_title = os.getenv("PR_TITLE", "")
          pr_body = os.getenv("PR_BODY", "")
          
          prompt = f"""Review this pull request as an expert software engineer:
          
          PR Title: {pr_title}
          PR Description: {pr_body}
          
          Changed Files: {', '.join(changed_files)}
          
          Changes:
          {pr_changes[:5000]}  # Limit to avoid token issues
          
          Provide:
          1. **Summary**: What does this PR do?
          2. **Code Quality**: Rate the code quality and explain
          3. **Potential Issues**: Any bugs, security issues, or concerns?
          4. **Suggestions**: Specific improvements
          5. **Testing**: Are tests adequate?
          
          Be constructive and specific. Use markdown formatting."""
          
          print("🔍 Reviewing PR...")
          
          response = client.chat.completions.create(
              model="deepseek-reasoner",
              messages=[
                  {"role": "system", "content": "You are a senior software engineer performing a thorough code review."},
                  {"role": "user", "content": prompt}
              ],
              max_tokens=4000
          )
          
          review_text = response.choices[0].message.content
          
          # Save review
          with open('pr_review.md', 'w') as f:
              f.write(f"## 🤖 DeepSeek Code Review\n\n")
              f.write(f"**PR #{os.getenv('PR_NUMBER')}**: {pr_title}\n\n")
              f.write("---\n\n")
              f.write(review_text)
              f.write("\n\n---\n*Review generated by DeepSeek Engineer*")
          
          print("✅ Review complete")
          EOF
      
      - name: Post PR Review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('pr_review.md', 'utf8');
            
            // Post review comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review
            });

  handle-new-issue:
    if: github.event_name == 'issues' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: Analyze and Label Issue
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          python << 'EOF'
          import os
          import json
          from openai import OpenAI
          
          client = OpenAI(
              api_key=os.getenv("DEEPSEEK_API_KEY"),
              base_url="https://api.deepseek.com"
          )
          
          issue_title = os.getenv("ISSUE_TITLE", "")
          issue_body = os.getenv("ISSUE_BODY", "")
          
          prompt = f"""Analyze this GitHub issue and provide:
          1. Suggested labels (bug, enhancement, documentation, etc.)
          2. Priority (low, medium, high, critical)
          3. Estimated complexity (easy, medium, hard)
          4. A brief summary of what needs to be done
          
          Issue Title: {issue_title}
          Issue Body: {issue_body}
          
          Return as JSON with keys: labels, priority, complexity, summary"""
          
          response = client.chat.completions.create(
              model="deepseek-coder",
              messages=[
                  {"role": "system", "content": "You are a GitHub issue triager. Respond with valid JSON only."},
                  {"role": "user", "content": prompt}
              ],
              max_tokens=500
          )
          
          try:
              analysis = json.loads(response.choices[0].message.content)
              with open('issue_analysis.json', 'w') as f:
                  json.dump(analysis, f)
          except:
              print("Failed to parse response")
          EOF
      
      - name: Apply Labels and Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const analysis = JSON.parse(fs.readFileSync('issue_analysis.json', 'utf8'));
              
              // Add labels
              if (analysis.labels && Array.isArray(analysis.labels)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: analysis.labels.filter(l => 
                    ['bug', 'enhancement', 'documentation', 'question', 'help wanted'].includes(l)
                  )
                });
              }
              
              // Add comment with analysis
              const comment = `## 🤖 DeepSeek Analysis
              
              **Priority**: ${analysis.priority || 'Not determined'}
              **Complexity**: ${analysis.complexity || 'Not determined'}
              
              **Summary**: ${analysis.summary || 'No summary available'}
              
              ---
              *This is an automated analysis. Human review recommended.*`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } catch (e) {
              console.log('Failed to process analysis:', e);
            }
