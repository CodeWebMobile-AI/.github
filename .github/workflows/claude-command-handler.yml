name: Claude Command Handler
on:
  issue_comment:
    types: [created]

jobs:
  process-command:
    if: |
      github.event.issue.labels[*].name contains 'project-suggestions' &&
      contains(github.event.comment.body, '@claude create')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install anthropic pygithub requests pyyaml beautifulsoup4
          
      - name: Create Security Template
        run: |
          # Create security policy template
          cat > SECURITY_TEMPLATE.md << 'EOF'
          # Security Policy
          
          ## Supported Versions
          
          | Version | Supported          |
          | ------- | ------------------ |
          | latest  | :white_check_mark: |
          
          ## Reporting a Vulnerability
          
          Please report security vulnerabilities to security@codewebmobile-ai.com
          
          ## Security Measures
          
          - Automated dependency scanning
          - Code security analysis with Semgrep
          - Secret detection with TruffleHog
          - Regular security audits
          EOF
          
      - name: Create Project Creator Script
        run: |
          # First copy the claude_brain_core.py from main workflow
          cat > claude_brain_core.py << 'EOF'
          import anthropic
          from github import Github
          import json
          import os
          import yaml
          import random
          import re
          import traceback
          from datetime import datetime
          
          class ClaudeMasterBrain:
              def __init__(self):
                  self.claude = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
                  self.g = Github(os.environ['GITHUB_TOKEN'])
                  self.org = self.g.get_organization('CodeWebMobile-AI')
                  self.master_plan = []
                  self.market_intel = {}
                  
              def extract_json_from_response(self, text):
                  """Extract JSON from Claude's response, handling various formats"""
                  json_match = re.search(r'```json\s*(.*?)\s*```', text, re.DOTALL)
                  if json_match:
                      return json_match.group(1)
                  json_match = re.search(r'\{.*\}', text, re.DOTALL)
                  if json_match:
                      return json_match.group(0)
                  return text
                  
              def analyze_market_opportunity(self, project_idea):
                  """Analyze market opportunity for a project idea"""
                  
                  market_prompt = f"""Analyze the market opportunity for: {project_idea}
                  
                  Score this opportunity from 1-10 based on:
                  1. Market demand
                  2. Competition level
                  3. Technical feasibility
                  4. Revenue potential
                  5. Innovation factor
                  
                  Return ONLY valid JSON in this exact format:
                  {{
                      "score": 1-10,
                      "analysis": "detailed reasoning",
                      "competitors": ["list of competitors"],
                      "unique_value_prop": "what makes this special"
                  }}"""
                  
                  try:
                      print(f"🔍 Re-analyzing market opportunity for: {project_idea}")
                      response = self.claude.messages.create(
                          model='claude-3-opus-20240229',
                          max_tokens=2000,
                          messages=[{'role': 'user', 'content': market_prompt}]
                      )
                      
                      raw_response = response.content[0].text
                      json_text = self.extract_json_from_response(raw_response)
                      result = json.loads(json_text)
                      print(f"✅ Market analysis successful. Score: {result.get('score', 'N/A')}/10")
                      return result
                      
                  except Exception as e:
                      print(f"❌ Error in market analysis: {e}")
                      # Return stored analysis if available
                      return {
                          "score": 7,
                          "analysis": "Unable to re-analyze, using stored data",
                          "competitors": [],
                          "unique_value_prop": "Based on original suggestion"
                      }
          EOF
          
          # Copy claude_brain_projects.py
          cat > claude_brain_projects.py << 'EOF'
          from claude_brain_core import ClaudeMasterBrain
          
          class ProjectCreator(ClaudeMasterBrain):
              def create_complete_project(self, project_spec):
                  """Create a complete project with market validation"""
                  
                  # Re-analyze market if needed (optional)
                  market_analysis = project_spec.get('market_analysis', {})
                  if not market_analysis or market_analysis.get('score') == 'Error':
                      market_analysis = self.analyze_market_opportunity(project_spec['description'])
                  
                  print(f"🚀 Creating project: {project_spec['name']} (Market score: {market_analysis.get('score', 'N/A')}/10)")
                  
                  # Create repository
                  repo = self.org.create_repo(
                      name=project_spec['name'],
                      description=f"🤖 {project_spec['description']} | Market Score: {market_analysis.get('score', 'N/A')}/10",
                      private=False,
                      has_issues=True,
                      has_projects=True,
                      has_wiki=True
                  )
                  
                  # Setup project
                  self.create_readme(repo, project_spec, market_analysis)
                  self.add_security_policy(repo)
                  self.add_gitignore(repo)
                  self.add_env_example(repo)
                  self.setup_cicd(repo)
                  self.create_initial_issues(repo, project_spec)
                  
                  return repo
              
              def add_gitignore(self, repo):
                  """Add Laravel-specific .gitignore file"""
                  
                  gitignore_content = """/node_modules
          /public/build
          /public/hot
          /public/storage
          /storage/*.key
          /vendor
          .env
          .env.backup
          .env.production
          .phpunit.result.cache
          Homestead.json
          Homestead.yaml
          auth.json
          npm-debug.log
          yarn-error.log
          /.fleet
          /.idea
          /.vscode
          """
                  
                  repo.create_file(
                      path=".gitignore",
                      message="📝 Add Laravel .gitignore",
                      content=gitignore_content,
                      branch="main"
                  )
              
              def add_env_example(self, repo):
                  """Add .env.example file for Laravel"""
                  
                  env_content = """APP_NAME=Laravel
          APP_ENV=local
          APP_KEY=
          APP_DEBUG=true
          APP_URL=http://localhost
          
          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug
          
          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=laravel
          DB_USERNAME=root
          DB_PASSWORD=
          
          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          
          MEMCACHED_HOST=127.0.0.1
          
          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379
          
          MAIL_MAILER=smtp
          MAIL_HOST=mailpit
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"
          
          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false
          
          PUSHER_APP_ID=
          PUSHER_APP_KEY=
          PUSHER_APP_SECRET=
          PUSHER_HOST=
          PUSHER_PORT=443
          PUSHER_SCHEME=https
          PUSHER_APP_CLUSTER=mt1
          
          VITE_APP_NAME="${APP_NAME}"
          VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
          VITE_PUSHER_HOST="${PUSHER_HOST}"
          VITE_PUSHER_PORT="${PUSHER_PORT}"
          VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
          VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
          """
                  
                  repo.create_file(
                      path=".env.example",
                      message="🔧 Add .env.example",
                      content=env_content,
                      branch="main"
                  )
              
              def create_readme(self, repo, spec, market_analysis):
                  """Create market-driven README"""
                  
                  readme = f"""# {spec['name']}
          
          > {spec['description']}
          
          ## 📊 Market Analysis
          
          **Market Score**: {market_analysis.get('score', 'N/A')}/10
          
          **Analysis**: {market_analysis.get('analysis', 'N/A')}
          
          **Unique Value**: {market_analysis.get('unique_value_prop', 'N/A')}
          
          ## 🚀 Tech Stack
          
          Built on [Laravel React Starter Kit](https://github.com/laravel/react-starter-kit)
          
          - Laravel (Backend)
          - React TypeScript (Frontend)
          - MySQL (Database)
          - Redis (Cache/Queues)
          - Inertia.js (SPA Framework)
          
          ## 🛠️ Getting Started
          
          This project is based on the official Laravel React starter kit. Follow these steps:
          
          1. Clone this repository
          2. Copy `.env.example` to `.env`
          3. Configure your database settings
          4. Run `composer install`
          5. Run `npm install`
          6. Run `php artisan key:generate`
          7. Run `php artisan migrate`
          8. Run `npm run dev` (development) or `npm run build` (production)
          
          ## 🔒 Security
          
          Security-first development with automated scanning.
          
          ## 🤖 Powered by Claude
          """
                  
                  repo.create_file(
                      path="README.md",
                      message="🤖 Create README",
                      content=readme,
                      branch="main"
                  )
              
              def add_security_policy(self, repo):
                  """Add security policy"""
                  with open('SECURITY_TEMPLATE.md', 'r') as f:
                      content = f.read()
                  
                  repo.create_file(
                      path="SECURITY.md",
                      message="🔒 Add security policy",
                      content=content,
                      branch="main"
                  )
              
              def add_gitignore(self, repo):
                  """Add Laravel-specific .gitignore file"""
                  
                  gitignore_content = """/node_modules
          /public/build
          /public/hot
          /public/storage
          /storage/*.key
          /vendor
          .env
          .env.backup
          .env.production
          .phpunit.result.cache
          Homestead.json
          Homestead.yaml
          auth.json
          npm-debug.log
          yarn-error.log
          /.fleet
          /.idea
          /.vscode
          """
                  
                  repo.create_file(
                      path=".gitignore",
                      message="📝 Add Laravel .gitignore",
                      content=gitignore_content,
                      branch="main"
                  )
              
              def setup_cicd(self, repo):
                  """Setup CI/CD pipeline"""
                  
                  workflow = """name: CI/CD Pipeline
          on: [push, pull_request]
          
          jobs:
            security:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Security Scan
                  uses: trufflesecurity/trufflehog@main
                  with:
                    path: ./
            
            test:
              runs-on: ubuntu-latest
              services:
                mysql:
                  image: mysql:8.0
                  env:
                    MYSQL_ROOT_PASSWORD: password
                    MYSQL_DATABASE: test_db
                  ports:
                    - 3306:3306
                  options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
              
              steps:
                - uses: actions/checkout@v4
                - name: Setup PHP
                  uses: shivammathur/setup-php@v2
                  with:
                    php-version: '8.2'
                    extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
                    coverage: none
                
                - name: Setup Node.js
                  uses: actions/setup-node@v4
                  with:
                    node-version: '20'
                    cache: 'npm'
                
                - name: Install PHP dependencies
                  run: composer install --prefer-dist --no-progress
                
                - name: Install NPM dependencies
                  run: npm ci
                
                - name: Copy .env
                  run: php -r "file_exists('.env') || copy('.env.example', '.env');"
                
                - name: Generate key
                  run: php artisan key:generate
                
                - name: Run tests
                  env:
                    DB_CONNECTION: mysql
                    DB_HOST: 127.0.0.1
                    DB_PORT: 3306
                    DB_DATABASE: test_db
                    DB_USERNAME: root
                    DB_PASSWORD: password
                  run: php artisan test
                
                - name: Build frontend
                  run: npm run build
            
            build:
              runs-on: ubuntu-latest
              needs: [security, test]
              steps:
                - uses: actions/checkout@v4
                - name: Build
                  run: echo "Deploy stage configured by Claude"
          """
                  
                  repo.create_file(
                      path=".github/workflows/cicd.yml",
                      message="🔧 Setup CI/CD",
                      content=workflow,
                      branch="main"
                  )
              
              def create_initial_issues(self, repo, spec):
                  """Create initial issues"""
                  
                  issues = [
                      {
                          "title": "🚀 Setup Laravel React Starter Kit",
                          "body": "Initialize project using Laravel React starter kit from https://github.com/laravel/react-starter-kit\n\n1. Clone the starter kit\n2. Configure environment variables\n3. Set up database connections\n4. Install dependencies\n5. Run initial migrations\n\n@claude please implement"
                      },
                      {
                          "title": "🎨 Customize React TypeScript Frontend",
                          "body": f"Customize the React TypeScript UI from the starter kit for our specific use case\n\n- Update components for {spec['name']}\n- Implement custom styling\n- Add required pages and routes\n- Configure API endpoints\n\n@claude please implement"
                      },
                      {
                          "title": "🔧 Configure Laravel Backend",
                          "body": f"Configure Laravel backend from the starter kit\n\n- Set up models for {spec['name']}\n- Create API routes\n- Implement authentication customizations\n- Add custom middleware if needed\n- Configure queues and cache\n\n@claude please implement"
                      },
                      {
                          "title": "🔒 Security Audit & Hardening",
                          "body": "Perform comprehensive security audit on the starter kit implementation\n\n- Review authentication setup\n- Check for vulnerabilities\n- Configure CORS properly\n- Set up rate limiting\n- Review environment variables\n- Implement security headers\n\n@claude please implement"
                      }
                  ]
                  
                  for issue in issues:
                      repo.create_issue(
                          title=issue["title"],
                          body=issue["body"],
                          labels=['enhancement', 'claude-task']
                      )
          EOF
          
      - name: Process Admin Command
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.CLAUDE_PAT }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          REPO_NAME: ${{ github.repository }}
        run: |
          python3 << 'EOF'
          import os
          import re
          import json
          from github import Github
          from claude_brain_projects import ProjectCreator
          
          class CommandProcessor:
              def __init__(self):
                  self.g = Github(os.environ['GITHUB_TOKEN'])
                  self.org = self.g.get_organization('CodeWebMobile-AI')
                  self.issue_number = int(os.environ['ISSUE_NUMBER'])
                  self.comment_body = os.environ['COMMENT_BODY']
                  self.issue_body = os.environ['ISSUE_BODY']
                  self.repo_name = os.environ['REPO_NAME']
                  self.creator = ProjectCreator()
                  
              def parse_command(self):
                  """Parse the admin command"""
                  command_match = re.search(r'@claude create\s+(.+)', self.comment_body.lower())
                  if not command_match:
                      return None
                      
                  command_arg = command_match.group(1).strip()
                  
                  if command_arg == 'all':
                      return {'type': 'all'}
                  elif '+' in command_arg:
                      # e.g., "8+" means score 8 or above
                      score = int(command_arg.replace('+', ''))
                      return {'type': 'score', 'min_score': score}
                  else:
                      # Specific numbers, e.g., "1,3,5"
                      numbers = [int(n.strip()) for n in command_arg.split(',')]
                      return {'type': 'specific', 'numbers': numbers}
              
              def extract_projects_from_issue(self):
                  """Extract project suggestions from the issue body"""
                  projects = []
                  
                  # Parse each project section
                  project_pattern = r'### (\d+)\. (.+?) [🟢🟡🔴] \(Score: (.+?)/10\)'
                  matches = re.finditer(project_pattern, self.issue_body)
                  
                  for match in matches:
                      number = int(match.group(1))
                      name = match.group(2).strip()
                      score_str = match.group(3)
                      
                      # Handle both numeric scores and "Error" scores
                      try:
                          score = int(score_str)
                      except ValueError:
                          score = 0  # Default for error cases
                      
                      # Extract project details
                      project_section = self.issue_body[match.end():]
                      next_project = re.search(r'### \d+\.', project_section)
                      if next_project:
                          project_section = project_section[:next_project.start()]
                      
                      # Parse project details
                      type_match = re.search(r'\*\*Type\*\*: (.+)', project_section)
                      desc_match = re.search(r'\*\*Description\*\*: (.+)', project_section)
                      tech_match = re.search(r'\*\*Tech Stack\*\*: (.+)', project_section)
                      analysis_match = re.search(r'\*\*Market Analysis\*\*: (.+)', project_section)
                      competitors_match = re.search(r'\*\*Competitors\*\*: (.+)', project_section)
                      value_match = re.search(r'\*\*Unique Value\*\*: (.+)', project_section)
                      
                      project = {
                          'number': number,
                          'name': name,
                          'score': score,
                          'type': type_match.group(1) if type_match else 'webapp',
                          'description': desc_match.group(1) if desc_match else '',
                          'tech_stack': [t.strip() for t in tech_match.group(1).split(',')] if tech_match else ['Laravel', 'React', 'TypeScript'],
                          'market_analysis': {
                              'score': score,
                              'analysis': analysis_match.group(1) if analysis_match else '',
                              'competitors': [c.strip() for c in competitors_match.group(1).split(',')] if competitors_match else [],
                              'unique_value_prop': value_match.group(1) if value_match else ''
                          }
                      }
                      
                      projects.append(project)
                  
                  return projects
              
              def execute_command(self):
                  """Execute the admin command"""
                  command = self.parse_command()
                  if not command:
                      self.post_error_comment("Invalid command format. Use: @claude create 1,3,5 | all | 8+")
                      return
                  
                  # Get all projects from the issue
                  all_projects = self.extract_projects_from_issue()
                  
                  if not all_projects:
                      self.post_error_comment("No projects found in the issue.")
                      return
                  
                  # Filter projects based on command
                  selected_projects = []
                  
                  if command['type'] == 'all':
                      selected_projects = all_projects
                  elif command['type'] == 'score':
                      selected_projects = [p for p in all_projects if p['score'] >= command['min_score']]
                  elif command['type'] == 'specific':
                      selected_projects = [p for p in all_projects if p['number'] in command['numbers']]
                  
                  if not selected_projects:
                      self.post_error_comment("No projects matched your selection criteria.")
                      return
                  
                  # Create selected projects
                  created_repos = []
                  failed_projects = []
                  
                  self.post_comment(f"🚀 Creating {len(selected_projects)} selected projects...")
                  
                  for project in selected_projects:
                      try:
                          print(f"Creating project: {project['name']}")
                          repo = self.creator.create_complete_project(project)
                          if repo:
                              created_repos.append({
                                  'name': project['name'],
                                  'url': repo.html_url
                              })
                      except Exception as e:
                          print(f"Failed to create {project['name']}: {e}")
                          failed_projects.append({
                              'name': project['name'],
                              'error': str(e)
                          })
                  
                  # Post results
                  self.post_results_comment(created_repos, failed_projects)
                  
                  # Close issue if all successful
                  if created_repos and not failed_projects:
                      # Find the correct repository for the issue
                      issue_repo = self.g.get_repo(self.repo_name)
                      issue = issue_repo.get_issue(self.issue_number)
                      issue.edit(state='closed')
              
              def post_comment(self, message):
                  """Post a comment on the issue"""
                  repo = self.g.get_repo(self.repo_name)
                  issue = repo.get_issue(self.issue_number)
                  issue.create_comment(message)
              
              def post_error_comment(self, error):
                  """Post an error comment"""
                  self.post_comment(f"❌ **Error**: {error}")
              
              def post_results_comment(self, created, failed):
                  """Post results of project creation"""
                  message = "## 📊 Project Creation Results\n\n"
                  
                  if created:
                      message += "### ✅ Successfully Created\n\n"
                      for repo in created:
                          message += f"- [{repo['name']}]({repo['url']})\n"
                  
                  if failed:
                      message += "\n### ❌ Failed to Create\n\n"
                      for project in failed:
                          message += f"- {project['name']}: {project['error']}\n"
                  
                  if created and not failed:
                      message += "\n✨ All projects created successfully! This issue has been closed."
                  
                  self.post_comment(message)
          
          # Execute
          try:
              processor = CommandProcessor()
              processor.execute_command()
          except Exception as e:
              print(f"❌ Fatal error: {e}")
              import traceback
              print(traceback.format_exc())
              # Try to post error comment
              try:
                  g = Github(os.environ['GITHUB_TOKEN'])
                  repo = g.get_repo(os.environ['REPO_NAME'])
                  issue = repo.get_issue(int(os.environ['ISSUE_NUMBER']))
                  issue.create_comment(f"❌ **Fatal Error**: {str(e)}")
              except:
                  pass
          EOF
          
      - name: Add Reaction
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CLAUDE_PAT }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            })
            
      - name: Add Error Reaction
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CLAUDE_PAT }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            })
