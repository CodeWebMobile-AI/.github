name: Claude AI Master Controller
on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:  # Manual trigger button
  
jobs:
  claude-control:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install anthropic pygithub requests
          
      - name: Claude Takes Control
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > claude_control.py << 'EOF'
          import anthropic
          from github import Github
          import json
          import os
          import re
          
          print('🤖 Claude AI activating for CodeWebMobile-AI...')
          
          claude = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
          g = Github(os.environ['GITHUB_TOKEN'])
          org = g.get_organization('CodeWebMobile-AI')
          
          # Get current state
          repos = list(org.get_repos())
          print(f'Current repos: {[r.name for r in repos]}')
          
          # Ask Claude what to do
          prompt = f"""You are the AI controller of the CodeWebMobile-AI GitHub organization.
          Current repositories: {[r.name for r in repos]}
          
          Create a new repository. Choose an interesting project idea.
          
          Respond with ONLY JSON, no other text:
          {{
            "action": "create_repo",
            "name": "your-chosen-name",
            "description": "Description of what this project does"
          }}"""
          
          response = claude.messages.create(
              model='claude-3-opus-20240229',
              max_tokens=1000,
              messages=[{'role': 'user', 'content': prompt}]
          )
          
          # Extract JSON from response
          response_text = response.content[0].text
          print(f'Claude response: {response_text}')
          
          # Try to extract JSON from the response
          try:
              # First try direct parsing
              decision = json.loads(response_text)
          except:
              # If that fails, try to extract JSON from the text
              json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
              if json_match:
                  decision = json.loads(json_match.group())
              else:
                  # Fallback: create a default project
                  decision = {
                      "action": "create_repo",
                      "name": "ai-assistant-bot",
                      "description": "An AI-powered assistant bot created by Claude"
                  }
          
          print(f'Claude decided: {decision}')
          
          if decision['action'] == 'create_repo':
              # Check if repo already exists
              existing_repos = [r.name for r in repos]
              if decision['name'] in existing_repos:
                  print(f'Repository {decision["name"]} already exists')
              else:
                  # Create new repository (FIXED: use private=False)
                  new_repo = org.create_repo(
                      name=decision['name'],
                      description=f"🤖 {decision['description']}",
                      auto_init=True,
                      private=False  # FIXED: changed from public=True
                  )
                  print(f'✅ Created: {new_repo.html_url}')
                  
                  # Add initial README content
                  readme_content = f"""# {decision['name']}
          
          {decision['description']}
          
          ## About
          This project was created autonomously by Claude AI as part of the CodeWebMobile-AI organization.
          
          ## Features
          - 🤖 AI-Generated
          - 🚀 Auto-maintained
          - 📝 Self-documenting
          
          ## Status
          Under active development by AI
          """
                  
                  new_repo.create_file(
                      path="README.md",
                      message="🤖 Update README with project details",
                      content=readme_content,
                      branch="main"
                  )
                  print('📝 Added README.md')
          EOF
          
          python claude_control.py
