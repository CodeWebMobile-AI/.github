name: Claude Master Autonomous System

on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours - optimized for quality over quantity
  workflow_dispatch:
  repository_dispatch:
    types: [claude-command]

jobs:
  claude-orchestrator:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      packages: write
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          # Python dependencies
          pip install anthropic pygithub requests pyyaml beautifulsoup4 feedparser
          pip install safety bandit semgrep trufflehog3

          # Node dependencies for security scanning
          npm install -g @npmcli/arborist snyk

      - name: Validate Python syntax
        run: python -m compileall .

      - name: Lint & format
        run: |
          pip install flake8 black
          flake8 --max-line-length=88 .
          black --check .

      - name: Smoke-run (dry run)
        run: |
          python -c "import claude_brain_core; print('Imports OK')"

      - name: Market Intelligence Gathering
        id: market_intel
        run: |
          python3 << 'EOF'
          import os, json, requests
          from bs4 import BeautifulSoup
          import feedparser

          # Scrape GitHub Trending
          trending_url = "https://github.com/trending"
          response = requests.get(trending_url)
          soup = BeautifulSoup(response.text, 'html.parser')

          trending_repos = [repo.select_one('h2 a').text.strip()
                            for repo in soup.select('.Box-row')[:10]
                            if repo.select_one('h2 a')]

          # Product Hunt RSS
          ph_feed = feedparser.parse('https://www.producthunt.com/feed')
          trending_products = [entry.title for entry in ph_feed.entries[:5]]

          market_data = {
              "github_trending": trending_repos,
              "product_hunt": trending_products
          }

          with open('market_intelligence.json', 'w') as f:
              json.dump(market_data, f)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"market_data={json.dumps(market_data)}\n")
          EOF

      - name: Security Baseline Check
        run: |
          cat > SECURITY_TEMPLATE.md << 'EOF'
          # Security Policy

          ## Supported Versions

          | Version | Supported          |
          | ------- | ------------------ |
          | latest  | :white_check_mark: |

          ## Reporting a Vulnerability

          Please report security vulnerabilities to security@codewebmobile-ai.com

          ## Security Measures

          - Automated dependency scanning
          - Code security analysis with Semgrep
          - Secret detection with TruffleHog
          - Regular security audits
          EOF

      - name: Create Claude Brain Script Part 1
        run: |
          cat > claude_brain_core.py << 'EOF'
          import anthropic
          from github import Github
          import json, os, yaml, random, re, traceback
          from datetime import datetime

          class ClaudeMasterBrain:
              def __init__(self):
                  self.claude = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
                  self.g = Github(os.environ['GITHUB_TOKEN'])
                  self.org = self.g.get_organization('CodeWebMobile-AI')
                  self.market_intel = json.loads(os.environ.get('MARKET_INTEL', '{}'))

              def extract_json_from_response(self, text):
                  json_match = re.search(r'```json\s*(.*?)\s*```', text, re.DOTALL)
                  if json_match:
                      return json_match.group(1)
                  json_match = re.search(r'\{.*\}', text, re.DOTALL)
                  if json_match:
                      return json_match.group(0)
                  return text

              # ... rest of core methods ...
          EOF

      - name: Create Claude Brain Script Part 2
        run: |
          cat > claude_brain_projects.py << EOF
          from claude_brain_core import ClaudeMasterBrain

          class ProjectCreator(ClaudeMasterBrain):
              def create_complete_project(self, project_spec):
                  """Create a complete project with market validation"""
                  analysis = self.analyze_market_opportunity(project_spec['description'])
                  if analysis['score'] < 6:
                      print(f"❌ Skipping {project_spec['name']} - score {analysis['score']}")
                      return
                  repo = self.org.create_repo(
                      name=project_spec['name'],
                      description=f"🤖 {project_spec['description']} | Score: {analysis['score']}/10",
                      private=False, has_issues=True, has_projects=True, has_wiki=True
                  )
                  self.create_readme(repo, project_spec, analysis)
                  # ... other setup ...

              def create_readme(self, repo, spec, analysis):
                  """Create market-driven README"""
                  readme = f"""
# {spec['name']}

> {spec['description']}

## 📊 Market Analysis

**Market Score**: {analysis['score']}/10

**Analysis**: {analysis['analysis']}

## 🚀 Tech Stack

- Laravel (Backend)
- React TypeScript (Frontend)
- MySQL (Database)
- Redis (Cache/Queues)

## 🔒 Security

Security-first development with automated scanning.

## 🤖 Powered by Claude
"""
                  repo.create_file(
                      path="README.md",
                      message="🤖 Create README",
                      content=readme,
                      branch="main"
                  )
          EOF

      - name: Create Claude Brain Script Part 3
        run: |
          cat > claude_brain_main.py << 'EOF'
          from claude_brain_projects import ProjectCreator
          import sys, json
          from datetime import datetime

          if __name__ == "__main__":
              executor = ProjectCreator()
              executor.run_continuous_improvement()
          EOF

      - name: Execute Claude Master Brain
        id: claude_brain
        continue-on-error: true
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN:       ${{ secrets.CLAUDE_PAT }}
          MARKET_INTEL:       ${{ steps.market_intel.outputs.market_data }}
        run: python claude_brain_main.py

      - name: Generate Performance Report
        if: always()
        run: |
          cat > performance_report.py << 'EOF'
          import json
          from datetime import datetime

          market = json.load(open('market_intelligence.json', 'r'))
          summary = json.load(open('execution_summary.json', 'r')) if os.path.exists('execution_summary.json') else {}
          report = {
              "timestamp": datetime.now().isoformat(),
              "market_intel": market,
              "summary": summary
          }
          with open('performance_report.json', 'w') as f:
              json.dump(report, f, indent=2)
          EOF
          python performance_report.py

      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-brain-reports
          path: |
            market_intelligence.json
            performance_report.json
            performance_summary.md
            execution_summary.json
