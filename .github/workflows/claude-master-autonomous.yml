name: Claude Master Autonomous System
on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours - optimized for quality over quantity
  workflow_dispatch:
  repository_dispatch:
    types: [claude-command]

jobs:
  claude-orchestrator:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      packages: write
      security-events: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: |
          # Python dependencies
          pip install anthropic pygithub requests pyyaml beautifulsoup4 feedparser
          pip install safety bandit semgrep truffleHog3
          
          # Node dependencies for security scanning
          npm install -g @npmcli/arborist snyk
          
      - name: Market Intelligence Gathering
        id: market_intel
        run: |
          python3 << 'EOF'
          import requests
          from bs4 import BeautifulSoup
          import feedparser
          import json
          
          # Scrape GitHub Trending
          trending_url = "https://github.com/trending"
          response = requests.get(trending_url)
          soup = BeautifulSoup(response.text, 'html.parser')
          
          trending_repos = []
          for repo in soup.select('.Box-row')[:10]:
              name = repo.select_one('h2 a')
              if name:
                  trending_repos.append(name.text.strip())
          
          # Product Hunt RSS
          ph_feed = feedparser.parse('https://www.producthunt.com/feed')
          trending_products = [entry.title for entry in ph_feed.entries[:5]]
          
          market_data = {
              "github_trending": trending_repos,
              "product_hunt": trending_products
          }
          
          with open('market_intelligence.json', 'w') as f:
              json.dump(market_data, f)
          
          print(f"::set-output name=market_data::{json.dumps(market_data)}")
          EOF
          
      - name: Security Baseline Check
        run: |
          # Create security policy template
          cat > SECURITY_TEMPLATE.md << 'EOF'
          # Security Policy
          
          ## Supported Versions
          
          | Version | Supported          |
          | ------- | ------------------ |
          | latest  | :white_check_mark: |
          
          ## Reporting a Vulnerability
          
          Please report security vulnerabilities to security@codewebmobile-ai.com
          
          ## Security Measures
          
          - Automated dependency scanning
          - Code security analysis with Semgrep
          - Secret detection with TruffleHog
          - Regular security audits
          EOF
          
      - name: Create Claude Brain Script Part 1
        run: |
          cat > claude_brain_core.py << 'EOF'
          import anthropic
          from github import Github
          import json
          import os
          import yaml
          import random
          from datetime import datetime
          
          class ClaudeMasterBrain:
              def __init__(self):
                  self.claude = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
                  self.g = Github(os.environ['GITHUB_TOKEN'])
                  self.org = self.g.get_organization('CodeWebMobile-AI')
                  self.master_plan = []
                  self.market_intel = json.loads(os.environ.get('MARKET_INTEL', '{}'))
                  
              def analyze_market_opportunity(self, project_idea):
                  """Analyze market opportunity for a project idea"""
                  
                  market_prompt = f"""Analyze the market opportunity for: {project_idea}
                  
                  Current GitHub trends: {self.market_intel.get('github_trending', [])}
                  Product Hunt trends: {self.market_intel.get('product_hunt', [])}
                  
                  Score this opportunity from 1-10 based on:
                  1. Market demand
                  2. Competition level
                  3. Technical feasibility
                  4. Revenue potential
                  5. Innovation factor
                  
                  Return JSON:
                  {{
                      "score": 1-10,
                      "analysis": "detailed reasoning",
                      "competitors": ["list of competitors"],
                      "unique_value_prop": "what makes this special"
                  }}"""
                  
                  response = self.claude.messages.create(
                      model='claude-3-opus-20240229',
                      max_tokens=2000,
                      messages=[{'role': 'user', 'content': market_prompt}]
                  )
                  
                  return json.loads(response.content[0].text)
              
              def analyze_organization(self):
                  """Claude analyzes the entire organization state with market intelligence"""
                  repos = list(self.org.get_repos())
                  
                  analysis_prompt = f"""You are the autonomous AI brain controlling CodeWebMobile-AI.
                  
                  Current repositories: {[r.name for r in repos]}
                  Market trends: {self.market_intel}
                  
                  Analyze and decide what to do next. Focus on:
                  1. Trending technologies to adopt
                  2. Market gaps to fill
                  3. High ROI projects
                  4. Security improvements
                  5. Laravel + React TypeScript stack
                  
                  Return concise JSON action plan."""
                  
                  response = self.claude.messages.create(
                      model='claude-3-opus-20240229',
                      max_tokens=4000,
                      messages=[{'role': 'user', 'content': analysis_prompt}]
                  )
                  
                  return json.loads(response.content[0].text)
          EOF
          
      - name: Create Claude Brain Script Part 2
        run: |
          cat > claude_brain_projects.py << 'EOF'
          from claude_brain_core import ClaudeMasterBrain
          
          class ProjectCreator(ClaudeMasterBrain):
              def create_complete_project(self, project_spec):
                  """Create a complete project with market validation"""
                  
                  # Market analysis
                  market_analysis = self.analyze_market_opportunity(project_spec['description'])
                  
                  if market_analysis['score'] < 6:
                      print(f"❌ Skipping {project_spec['name']} - Market score: {market_analysis['score']}/10")
                      return None
                  
                  print(f"🚀 Creating project: {project_spec['name']} (Market score: {market_analysis['score']}/10)")
                  
                  # Create repository
                  repo = self.org.create_repo(
                      name=project_spec['name'],
                      description=f"🤖 {project_spec['description']} | Market Score: {market_analysis['score']}/10",
                      private=False,
                      has_issues=True,
                      has_projects=True,
                      has_wiki=True
                  )
                  
                  # Setup project
                  self.create_readme(repo, project_spec, market_analysis)
                  self.add_security_policy(repo)
                  self.setup_cicd(repo)
                  self.create_initial_issues(repo, project_spec)
                  
                  return repo
              
              def create_readme(self, repo, spec, market_analysis):
                  """Create market-driven README"""
                  
                  readme = f"""# {spec['name']}
          
          > {spec['description']}
          
          ## 📊 Market Analysis
          
          **Market Score**: {market_analysis['score']}/10
          
          **Analysis**: {market_analysis['analysis']}
          
          **Unique Value**: {market_analysis['unique_value_prop']}
          
          ## 🚀 Tech Stack
          
          - Laravel (Backend)
          - React TypeScript (Frontend)
          - MySQL (Database)
          - Redis (Cache/Queues)
          
          ## 🔒 Security
          
          Security-first development with automated scanning.
          
          ## 🤖 Powered by Claude
          """
                  
                  repo.create_file(
                      path="README.md",
                      message="🤖 Create README",
                      content=readme,
                      branch="main"
                  )
              
              def add_security_policy(self, repo):
                  """Add security policy"""
                  with open('SECURITY_TEMPLATE.md', 'r') as f:
                      content = f.read()
                  
                  repo.create_file(
                      path="SECURITY.md",
                      message="🔒 Add security policy",
                      content=content,
                      branch="main"
                  )
              
              def setup_cicd(self, repo):
                  """Setup CI/CD pipeline"""
                  
                  workflow = """name: CI/CD Pipeline
          on: [push, pull_request]
          
          jobs:
            security:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Security Scan
                  uses: trufflesecurity/trufflehog@main
                  with:
                    path: ./
            
            test:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Run Tests
                  run: echo "Tests configured by Claude"
            
            build:
              runs-on: ubuntu-latest
              needs: [security, test]
              steps:
                - uses: actions/checkout@v4
                - name: Build
                  run: echo "Build configured by Claude"
          """
                  
                  repo.create_file(
                      path=".github/workflows/cicd.yml",
                      message="🔧 Setup CI/CD",
                      content=workflow,
                      branch="main"
                  )
              
              def create_initial_issues(self, repo, spec):
                  """Create initial issues"""
                  
                  issues = [
                      {
                          "title": "🚀 Initial Laravel Backend Setup",
                          "body": "Setup Laravel with authentication, models, and API routes\n\n@claude please implement"
                      },
                      {
                          "title": "🎨 Create React TypeScript Frontend",
                          "body": "Build React TypeScript UI with component structure\n\n@claude please implement"
                      },
                      {
                          "title": "🔒 Security Audit",
                          "body": "Perform comprehensive security audit\n\n@claude please implement"
                      }
                  ]
                  
                  for issue in issues:
                      repo.create_issue(
                          title=issue["title"],
                          body=issue["body"],
                          labels=['enhancement', 'claude-task']
                      )
          EOF
          
      - name: Create Claude Brain Script Part 3
        run: |
          cat > claude_brain_main.py << 'EOF'
          from claude_brain_projects import ProjectCreator
          import json
          
          class MasterExecutor(ProjectCreator):
              def work_on_existing_projects(self, tasks):
                  """Work on existing repositories"""
                  
                  for task in tasks[:3]:  # Limit to 3 projects
                      try:
                          repo = self.org.get_repo(task['repo'])
                          
                          if 'security_audit' in task.get('actions', []):
                              self.perform_security_audit(repo)
                          
                          if 'add_feature' in task.get('actions', []):
                              self.add_feature_issue(repo)
                              
                      except Exception as e:
                          print(f"Error with {task['repo']}: {e}")
              
              def perform_security_audit(self, repo):
                  """Create security audit issue"""
                  
                  repo.create_issue(
                      title="🔒 Security Audit Required",
                      body="Perform security audit:\n- Dependency scan\n- Code analysis\n- Secret detection\n\n@claude please audit",
                      labels=['security', 'claude-task']
                  )
              
              def add_feature_issue(self, repo):
                  """Add feature request"""
                  
                  repo.create_issue(
                      title="✨ New Feature: Enhance User Experience",
                      body="Add new feature based on market trends\n\n@claude please implement",
                      labels=['enhancement', 'claude-task']
                  )
              
              def run_continuous_improvement(self):
                  """Main execution loop"""
                  
                  print("🧠 Claude Master Brain activated!")
                  print(f"📊 Market data: {len(self.market_intel.get('github_trending', []))} trends")
                  
                  # Get action plan
                  plan = self.analyze_organization()
                  
                  # Create one quality project
                  new_projects = plan.get('new_projects', [])
                  if new_projects:
                      try:
                          self.create_complete_project(new_projects[0])
                      except Exception as e:
                          print(f"Project creation error: {e}")
                  
                  # Work on existing projects
                  self.work_on_existing_projects(plan.get('existing_projects', []))
                  
                  # Save execution summary
                  with open('execution_summary.json', 'w') as f:
                      json.dump({
                          "timestamp": datetime.now().isoformat(),
                          "projects_analyzed": len(plan.get('existing_projects', [])),
                          "new_project_attempted": len(new_projects) > 0
                      }, f)
                  
                  print("✅ Cycle complete!")
          
          if __name__ == "__main__":
              from datetime import datetime
              executor = MasterExecutor()
              executor.run_continuous_improvement()
          EOF
          
      - name: Execute Claude Master Brain
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.CLAUDE_PAT }}
          MARKET_INTEL: ${{ steps.market_intel.outputs.market_data }}
        run: |
          python claude_brain_main.py
          
      - name: Generate Performance Report
        if: always()
        env:
          MARKET_INTEL: ${{ steps.market_intel.outputs.market_data }}
        run: |
          cat > performance_report.py << 'EOF'
          import json
          import os
          from datetime import datetime
          
          # Load market intelligence data
          market_data = {}
          try:
              with open('market_intelligence.json', 'r') as f:
                  market_data = json.load(f)
          except:
              market_data = json.loads(os.environ.get('MARKET_INTEL', '{}'))
          
          # Load execution summary if available
          execution_summary = {}
          try:
              with open('execution_summary.json', 'r') as f:
                  execution_summary = json.load(f)
          except:
              pass
          
          report = {
              "timestamp": datetime.now().isoformat(),
              "cycle": "2-hour quality cycle",
              "focus": "Market-driven development with security-first approach",
              "market_intelligence": {
                  "github_trending": market_data.get('github_trending', []),
                  "github_trending_count": len(market_data.get('github_trending', [])),
                  "product_hunt_trends": market_data.get('product_hunt', []),
                  "product_hunt_count": len(market_data.get('product_hunt', [])),
                  "analysis_timestamp": datetime.now().isoformat()
              },
              "execution_summary": execution_summary,
              "optimizations": [
                  "Quality over quantity",
                  "Market validation before creation",
                  "Security scanning integrated",
                  "Resource protection enabled"
              ],
              "tech_stack_focus": [
                  "Laravel + React TypeScript",
                  "MySQL + Redis",
                  "Security-first architecture"
              ]
          }
          
          # Create combined report
          with open('performance_report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          # Also create a markdown summary
          with open('performance_summary.md', 'w') as f:
              f.write(f"# Claude Master Brain Performance Report\n\n")
              f.write(f"**Generated**: {report['timestamp']}\n\n")
              f.write(f"## 📊 Market Intelligence\n\n")
              f.write(f"- **GitHub Trending Projects**: {report['market_intelligence']['github_trending_count']}\n")
              f.write(f"- **Product Hunt Trends**: {report['market_intelligence']['product_hunt_count']}\n\n")
              f.write(f"### Top GitHub Trends\n")
              for trend in market_data.get('github_trending', [])[:5]:
                  f.write(f"- {trend}\n")
              f.write(f"\n### Product Hunt Highlights\n")
              for product in market_data.get('product_hunt', [])[:5]:
                  f.write(f"- {product}\n")
              f.write(f"\n## 🎯 Execution Focus\n\n")
              f.write(f"{report['focus']}\n\n")
              f.write(f"## ⚡ Optimizations\n\n")
              for opt in report['optimizations']:
                  f.write(f"- {opt}\n")
          
          print("📊 Comprehensive performance report generated")
          print(f"📈 Tracked {len(market_data.get('github_trending', []))} GitHub trends")
          print(f"🚀 Tracked {len(market_data.get('product_hunt', []))} Product Hunt trends")
          EOF
          
          python performance_report.py
          
      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: claude-brain-reports
          path: |
            market_intelligence.json
            performance_report.json
            performance_summary.md
            execution_summary.json
